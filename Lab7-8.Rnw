\documentclass{article}
\usepackage{amsmath} %This allows me to use the align functionality.
                     %If you find yourself trying to replicate
                     %something you found online, ensure you're
                     %loading the necessary packages!
\usepackage{amsfonts}%Math font
\usepackage{graphicx}%For including graphics
\usepackage{hyperref}%For Hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\hypersetup{colorlinks = true,citecolor=black} %set citations to have black (not green) color
\usepackage{natbib}        %For the bibliography
\setlength{\bibsep}{0pt plus 0.3ex}
\bibliographystyle{apalike}%For the bibliography
\usepackage[margin=0.50in]{geometry}
\usepackage{float}
\usepackage{multicol}

%fix for figures
\usepackage{caption}
\newenvironment{Figure}
  {\par\medskip\noindent\minipage{\linewidth}}
  {\endminipage\par\medskip}
\begin{document}
\title{Lab 7-8 -- MATH 240 -- Computational Statistics}

\author{
  Jackson Colby \\
  Colgate University  \\
  Mathematics  \\
  {\tt jcolby@colgate.edu}
}

\date{}

\maketitle

\begin{multicols}{2}

\section{Introduction}

The Beta Distribution is a widely used probability distribution used to model a random variable X that ranges from 0 to 1. This property makes the Beta Distribution useful for modeling proportions, probabilities, or rates. The Distribution takes in two parameters \( \alpha \) and \( \beta \), both greater than 0 and is flexible with regards to its shape and skewness. In this report, we’ll take a deeper look at the Beta distribution, exploring its key properties, how it is parameterized, and how we can estimate its parameters using two common methods: the Method of Moments (MOM) and Maximum Likelihood Estimation (MLE). We’ll also apply the Beta distribution to a real-life example involving death rates data to demonstrate how it can be used in practice.


\section{Density Functions and Parameters}

The Beta distribution with parameters \( \alpha \) and \( \beta \) is given by the probability density function:

\[
f_X(x | \alpha, \beta) = \frac{\Gamma(\alpha + \beta)}{\Gamma(\alpha) \Gamma(\beta)} x^{\alpha - 1} (1 - x)^{\beta - 1}, \quad \text{for } x \in [0, 1]
\]

The probability function for the Beta distribution takes values of 0 everywhere outside of [0,1]. 


The following plot shows the comparison between a Beta distribution with \(\alpha=5\) and \(\beta=5\) and a Gaussian distribution with the same mean and variance. This figure shows that when alpha and beta are the same or close to the same the beta distribution has a similar density to the normal distribution. If \(\alpha\) is greater than \(\beta\) then the distribution will be left skewed and if \(\alpha\) is less than \(\beta\) then the distribution will be right skewed. 

<<fig=TRUE, echo=FALSE, message=FALSE, warning=FALSE,fig.width=5, fig.height=3>>=
library(tidyverse)
library(ggplot2)
alpha <- 5
beta <- 5

q1.fig.dat <- tibble(x = seq(-0.25, 1.25, length.out=1000)) |>   # generate a grid of points
  mutate(beta.pdf = dbeta(x, alpha, beta),                      # compute the beta PDF
         norm.pdf = dnorm(x,                                    # Gaussian distribution with
                          mean = alpha/(alpha+beta),            # same mean and variance
                          sd = sqrt((alpha*beta)/((alpha+beta)^2*(alpha+beta+1)))))

# Plot
ggplot(data= q1.fig.dat) +                                              # specify data
  geom_line(aes(x=x, y=beta.pdf, color="Beta(5,5)")) +                 # plot beta dist
  geom_line(aes(x=x, y=norm.pdf, color="Gaussian")) +                  # plot Gaussian dist
  geom_hline(yintercept=0) +                                            # plot x axis
  theme_bw() +                                                          # change theme
  xlab("x") +                                                           # label x axis
  ylab("Density") +                                                     # label y axis
  scale_color_manual("", values = c("red", "grey")) +                  # change colors
  theme(legend.position = "bottom")
@

A table containing the four given cases is below.
<<echo=FALSE, results='asis'>>=
library(tidyverse)
library(xtable)

# Create the Beta function
Beta <- function(alpha, beta) {
  mean = alpha / (alpha + beta)
  variance = (alpha * beta) / ((alpha + beta + 1) * (alpha + beta)^2)
  skewness = (2 * (beta - alpha) * sqrt(alpha + beta + 1)) / ((alpha + beta + 2) * sqrt(alpha * beta))
  kurtosis = (6 * ((alpha - beta)^2 * (alpha + beta + 1) - alpha * beta * (alpha + beta + 2))) /
    (alpha * beta * (alpha + beta + 2) * (alpha + beta + 3))
  return(c(alpha = alpha, beta = beta, mean = mean, variance = variance, skewness = skewness, kurtosis = kurtosis))
}

# Calculate cases
alpha = 2; beta = 5; case_1 = Beta(alpha, beta)
alpha = 5; beta = 5; case_2 = Beta(alpha, beta)
alpha = 5; beta = 2; case_3 = Beta(alpha, beta)
alpha = 0.5; beta = 0.5; case_4 = Beta(alpha, beta)

# Combine results
combined_matrix = rbind(case_1, case_2, case_3, case_4)
results_table = as.data.frame(combined_matrix)
colnames(results_table) = c("alpha", "beta", "mean", "variance", "skewness", "kurtosis")

one.table = xtable(results_table, caption = "Summary of Beta Distribution Statistics")
@

<<echo=FALSE, results="asis">>=
print(one.table,
table.placement = "H", include.rownames=FALSE, size = "small")
@
As seen in the table, for larger \(\alpha\) and \(\beta\) the variance is lower. All the Beta distributions are platykurtic, the graphs being more platykurtic when \(\alpha\) and \(\beta\) are the same or similar. 

\section{Properties}
The population level properties for the Beta Distribution are as follows:
The mean is given by:
\[
E(X) = \frac{\alpha}{\alpha + \beta}
\]
The variance is given by:
\[
\text{Var}(X) = \frac{\alpha \beta}{(\alpha + \beta)^2 (\alpha + \beta + 1)}
\]
The skewness is given by:
\[
\text{Skew}(X) = \frac{2(\beta - \alpha)}{(\alpha + \beta + 1)\sqrt{(\alpha + \beta + 2)\alpha \beta}}
\]
The excess kurtosis is given by:
\[
\text{Kurt}(X) = \frac{6(\alpha - \beta)^2}{(\alpha + \beta + 1)\left(\alpha + \beta + 2\right)} - \frac{\alpha \beta (\alpha + \beta + 2)}{\alpha \beta (\alpha + \beta + 2)(\alpha + \beta + 3)}
\]

A function called beta.moment was utilized to test both centered and uncentered moments of the population-level characteristics to the approximations calculated. 

For the case alpha=2, beta=5: the statistics using the population level were mean=0.285714, var=0.0255102, skew=0.047619, kurt=0.001874.
These statistics compared to the table above are very close to the values of the approximation, meaning the characteristics described above are true for the Beta Distribution.

\section{Estimators}
For the case where alpha=2 and beta=5, the following summary statistics were calculated for a sample of 500.


<<summary_stats_case_1, echo=FALSE, results='asis'>>=
library(e1071)
library(tibble)
library(xtable)

# Set seed and parameters for sampling
set.seed(7272)
sample.size <- 500
alpha <- 2
beta <- 5

# Generate beta sample
beta.sample <- rbeta(n = sample.size, shape1 = alpha, shape2 = beta)

# Summary statistics for the Beta sample
summary_stats_case_1 <- tibble(data = beta.sample) |>
  summarize(
    mean_sample = mean(data),
    variance_sample = var(data),
    skewness_sample = skewness(data),
    kurtosis_sample = kurtosis(data)  # Excess kurtosis
  )

# Convert the summary statistics tibble to a LaTeX table
two.table=xtable(summary_stats_case_1, caption = "Summary Statistics for Beta Sample")
@
<<echo=FALSE, results="asis">>=
print(two.table,
table.placement = "H", include.rownames=FALSE, size = "small")
@

Below is a distribution showing the estimated density and the actual Beta Distribtuion over the sample.
<<plot_beta_sample, echo=F, fig=T, out.width="0.4\\textwidth", out.height="0.2\\textheight">>=
library(e1071)  # for skewness and kurtosis
library(ggplot2)
library(tibble)

# Set seed and parameters for sampling
set.seed(7272)
sample.size <- 500
alpha <- 2
beta <- 5

# Generate beta sample
beta.sample <- rbeta(n = sample.size, shape1 = alpha, shape2 = beta)

# Create a data frame for plotting
data_case_1 <- tibble(data_case_1 = beta.sample)

# Plot the histogram, density estimate, and Beta(2,5) distribution
ggplot(data_case_1, aes(x = data_case_1)) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +
  stat_density(aes(color = "Estimated Density"), linewidth = 1, geom = "line") +
  stat_function(
    fun = dbeta, args = list(shape1 = alpha, shape2 = beta), 
    linewidth = 1, aes(color = "Beta(2, 5) Distribution")
  ) +
  labs(
    title = "Histogram and Density of Beta Sample with Beta(2, 5) Distribution",
    x = "x",
    y = "Density"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")
@

As seen in the plot, the estimated density does a good job of fitting the data, and fits similarly compared to the actual Beta(2,5) Distribution.

Utilizing the packages cumstats \citep{cumstats} and patchwork \citep{patchwork}, we created plots that tracked the path of the summary statistics for different samples as n goes to 500.
<<echo=FALSE, results='hide', warning=FALSE, message=FALSE, fig.width=5, fig.height=3>>=
library(tidyverse)
library(cumstats)
library(patchwork)
library(ggplot2)


#create a function that takes alpha and beta as inputs and computes the 
#mean, variance, skewness, and excess kurtosis
Beta = function(alpha, beta){
mean=alpha/(alpha+beta)
variance= (alpha*beta)/((alpha+beta+1)*(alpha+beta)^2)
skewness= (2*(beta-alpha)*sqrt(alpha+beta+1))/((alpha+beta+2)*sqrt(alpha*beta))
kurtosis= ((6*((alpha-beta)^2*(alpha+beta+1)-alpha*beta*(alpha+beta+2)))/(alpha*beta*(alpha+beta+2)*(alpha+beta+3)))
return(c(alpha=alpha, beta=beta, mean = mean, variance = variance, skewness = skewness, kurtosis = kurtosis))
}
alpha = 2
beta = 5
set.seed(7272)
n <- 500

# Generate the initial beta sample
beta.sample <- rbeta(n, alpha, beta)

# Create the cumulative statistics dataframe
cum_stats_df <- data.frame(
  x = 1:n,
  mean = cummean(beta.sample),
  variance = cumvar(beta.sample),
  skewness = cumskew(beta.sample),
  kurtosis = cumkurt(beta.sample) - 3
)

# real values (case_1 represents theoretical Beta distribution)
case_1 = Beta(alpha, beta)

# Initial plots for mean, variance, skewness, kurtosis
p_mean <- ggplot(cum_stats_df, aes(x = x, y = mean)) +
  geom_line() +
  geom_hline(yintercept = case_1[3], linetype = 'dashed', color = 'red') +
  labs(title = 'Cumulative Mean')

p_variance <- ggplot(cum_stats_df, aes(x = x, y = variance)) +
  geom_line() +
  geom_hline(yintercept = case_1[4], linetype = 'dashed', color = 'red') +
  labs(title = 'Cumulative Variance')

p_skewness <- ggplot(cum_stats_df, aes(x = x, y = skewness)) +
  geom_line() +
  geom_hline(yintercept = case_1[5], linetype = 'dashed', color = 'red') +
  labs(title = 'Cumulative Skewness')

p_kurtosis <- ggplot(cum_stats_df, aes(x = x, y = kurtosis)) +
  geom_line() +
  geom_hline(yintercept = case_1[6], linetype = 'dashed', color = 'red') +
  labs(title = 'Cumulative Kurtosis')

# Combine initial plots into a 2x2 grid
grid_plot <- p_mean + p_variance + p_skewness + p_kurtosis + plot_layout(ncol = 2)

# Loop to add new data for plots and update cumulative statistics
for (i in 2:50) {
  set.seed(7272 + i)
  new_data <- rbeta(n, alpha, beta)
  new_cum_stats_df <- data.frame(
    x = 1:n,
    mean = cummean(new_data),
    variance = cumvar(new_data),
    skewness = cumskew(new_data),
    kurtosis = cumkurt(new_data) - 3
  )
  
  # Add new lines for the statistics
  p_mean <- p_mean + geom_line(data = new_cum_stats_df, aes(x = x, y = mean), color = i)
  p_variance <- p_variance + geom_line(data = new_cum_stats_df, aes(x = x, y = variance), color = i)
  p_skewness <- p_skewness + geom_line(data = new_cum_stats_df, aes(x = x, y = skewness), color = i)
  p_kurtosis <- p_kurtosis + geom_line(data = new_cum_stats_df, aes(x = x, y = kurtosis), color = i)
}

# Combine updated plots into a 2x2 grid
new_grid_plot <- p_mean + p_variance + p_skewness + p_kurtosis + plot_layout(ncol = 2)
new_grid_plot
@

As seen in the plot above, as n (the sample size), gets larger all the samples converge to the same values meaning that any random sample is sufficient for calculating the mean, variance, etc.  of the Beta Distribution, and the sample size is important because the larger sample size leads to a better approximation.

The variation of the mean, variance, etc. can be shown in the plots below in the Appendix.
All four of the plots follow close to normal distributions, showing that the samples of all mean, variance, etc. follow close to a Gaussian distribution, forming a bell shaped curve.

\section{Example with Death Rates Data}
This lab conducted an example using data from the World Bank for country death rates worldwide. We modeled this data using the Beta Distribution. 

Utilizing the 2x2 plot and table in the Appendix, you can notice that the MOM and MLE follow similar trends to the previous cases, their values being nearly normally distributed for both alpha and beta. The table states that the MLE has less bias but also less precision and lower MSE. This is hard to tell in the plot, but the data does seem a little more spread out on the MOM plots, whereas the MLE plots are slightly more condensed on the actual value.

\begin{tiny}
\bibliography{bib}
\end{tiny}
\end{multicols}

\newpage

\section{Appendix}
\subsection{Estimators}
<<echo=FALSE, message=FALSE, warning=FALSE, fig.width=4, fig.height=2>>=
library(tidyverse)
library(ggplot2)
library(moments)
n=500
alpha=2
beta=5

#creates blank data frame to store data with 1000 entries
means <- numeric(1000)
variances <- numeric(1000)
skewnesses <- numeric(1000)
kurtoses <- numeric(1000)

# Loop to generate the data and compute statistics
for (i in 1:1000) {
  set.seed(7272 + i)  # set seed
  
  # Simulate data from the Beta distribution
  data <- rbeta(n, shape1 = alpha, shape2 = beta)
  
  # Compute statistics
  means[i] <- mean(data)
  variances[i] <- var(data)
  skewnesses[i] <- skewness(data)
  kurtoses[i] <- kurtosis(data) - 3  # Excess kurtosis is kurtosis - 3
}

# Create a data frame with the statistics
stats_df <- data.frame(
  means = means,
  variances = variances,
  skewnesses = skewnesses,
  kurtoses = kurtoses
)
ggplot(stats_df) +
  geom_histogram(aes(x = means, y = after_stat(density)), bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_density(aes(x = means), color = "red", linewidth = 1) +
  ggtitle("Sampling Distribution of Means") +
  theme_minimal()
@

<<echo=FALSE, message=FALSE, warning=FALSE, fig.width=4, fig.height=2>>=
library(tidyverse)
library(ggplot2)
library(moments)
n=500
alpha=2
beta=5

#creates blank data frame to store data with 1000 entries
means <- numeric(1000)
variances <- numeric(1000)
skewnesses <- numeric(1000)
kurtoses <- numeric(1000)

# Loop to generate the data and compute statistics
for (i in 1:1000) {
  set.seed(7272 + i)  # set seed
  
  # Simulate data from the Beta distribution
  data <- rbeta(n, shape1 = alpha, shape2 = beta)
  
  # Compute statistics
  means[i] <- mean(data)
  variances[i] <- var(data)
  skewnesses[i] <- skewness(data)
  kurtoses[i] <- kurtosis(data) - 3  # Excess kurtosis is kurtosis - 3
}

# Create a data frame with the statistics
stats_df <- data.frame(
  means = means,
  variances = variances,
  skewnesses = skewnesses,
  kurtoses = kurtoses
)
ggplot(stats_df) +
  geom_histogram(aes(x = variances, y = after_stat(density)), bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_density(aes(x = variances), color = "red", linewidth = 1) +
  ggtitle("Sampling Distribution of Variances") +
  theme_minimal()
@

<<echo=FALSE,message=FALSE, warning=FALSE, fig.width=4, fig.height=2>>=
library(tidyverse)
library(ggplot2)
library(moments)
n=500
alpha=2
beta=5

#creates blank data frame to store data with 1000 entries
means <- numeric(1000)
variances <- numeric(1000)
skewnesses <- numeric(1000)
kurtoses <- numeric(1000)

# Loop to generate the data and compute statistics
for (i in 1:1000) {
  set.seed(7272 + i)  # set seed
  
  # Simulate data from the Beta distribution
  data <- rbeta(n, shape1 = alpha, shape2 = beta)
  
  # Compute statistics
  means[i] <- mean(data)
  variances[i] <- var(data)
  skewnesses[i] <- skewness(data)
  kurtoses[i] <- kurtosis(data) - 3  # Excess kurtosis is kurtosis - 3
}

# Create a data frame with the statistics
stats_df <- data.frame(
  means = means,
  variances = variances,
  skewnesses = skewnesses,
  kurtoses = kurtoses
)
ggplot(stats_df) +
  geom_histogram(aes(x = skewnesses, y = after_stat(density)), bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_density(aes(x = skewnesses), color = "red", linewidth = 1) +
  ggtitle("Sampling Distribution of Skewnesses") +
  theme_minimal()
@

<<echo=FALSE, message=FALSE, warning=FALSE, fig.width=4, fig.height=2>>=
library(tidyverse)
library(ggplot2)
library(moments)
n=500
alpha=2
beta=5

#creates blank data frame to store data with 1000 entries
means <- numeric(1000)
variances <- numeric(1000)
skewnesses <- numeric(1000)
kurtoses <- numeric(1000)

# Loop to generate the data and compute statistics
for (i in 1:1000) {
  set.seed(7272 + i)  # set seed
  
  # Simulate data from the Beta distribution
  data <- rbeta(n, shape1 = alpha, shape2 = beta)
  
  # Compute statistics
  means[i] <- mean(data)
  variances[i] <- var(data)
  skewnesses[i] <- skewness(data)
  kurtoses[i] <- kurtosis(data) - 3  # Excess kurtosis is kurtosis - 3
}

# Create a data frame with the statistics
stats_df <- data.frame(
  means = means,
  variances = variances,
  skewnesses = skewnesses,
  kurtoses = kurtoses
)
ggplot(stats_df) +
  geom_histogram(aes(x = kurtoses, y = after_stat(density)), bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_density(aes(x = kurtoses), color = "red", linewidth = 1) +
  ggtitle("Sampling Distribution of Excess Kurtoses") +
  theme_minimal()
@

\subsection{Example}
<<echo=FALSE, fig=TRUE, message=FALSE, warning=FALSE, fig.width=4, fig.height=2>>=
library(tidyverse)
library(ggplot2)

alpha_mom <- 8.426105  # Example value for alpha from MOM
beta_mom <- 1003.461384  # Example value for beta from MOM
alpha_mle <- 8.271409  # Example value for alpha from MLE
beta_mle <- 985.047671   # Example value for beta from MLE

# Create things needed for the plot
x_vals <- seq(0, 0.02, length.out = 1000)  # All x-values are between 0 and 0.02
beta_mom_pdf <- dbeta(x_vals, shape1 = alpha_mom, shape2 = beta_mom)
beta_mle_pdf <- dbeta(x_vals, shape1 = alpha_mle, shape2 = beta_mle)

# Create a tibble to store x-values and the corresponding PDFs
df <- tibble(
  x = x_vals,
  beta_mom = beta_mom_pdf,
  beta_mle = beta_mle_pdf
)

data=read_csv("deathcrudedata.csv")|>
  mutate(col_2022_rate=`2022`/1000)

ggplot(data.frame(data), aes(x = col_2022_rate)) +
  geom_histogram(aes(y = ..density..), bins = 10, fill = "lightblue", color = "black", alpha = 0.7) +
  geom_line(data = df, aes(x = x, y = beta_mom), color = "red", size = 1) +
  geom_line(data = df, aes(x = x, y = beta_mle), color = "green", size = 1) +
  labs(title = "Histogram with Beta Distributions", x = "Death Rate (per 1000 citizens scaled to [0,1])", y = "Density") +
  theme_minimal()
@

<<echo=FALSE, message=FALSE, results='hide', warning=FALSE, fig.width=6, fig.height=4>>=
library(tidyverse)
library(ggplot2)
library(patchwork)
library(nleqslv)
data=read_csv("deathcrudedata.csv")|>
  mutate(col_2022_rate=`2022`/1000)

col_2022_rate=data$col_2022_rate

#Using MOM
#for the first example
#first moment E(X)]
m1=mean(col_2022_rate, na.rm=T) #263 observations that are not NA
#second moment E(X^2)
m2=mean(col_2022_rate^2, na.rm=T) #squared xs and 263 observations that are not NA

#Use equation solver to find parameters
MOM.beta=function(data, par){
  m1=mean(data, na.rm=T)
  m2=mean(data^2, na.rm=T)
  alpha=par[1]
  beta=par[2]
  
  EX= alpha/(alpha+beta)
  EX2= (alpha*(alpha+1))/((alpha+beta)*(alpha+beta+1))
  return(c(EX-m1, EX2-m2)) #goal to be 0, find alpha and beta
}
par=c(1,1) #initial guess
nleqslv(x=par,
        fn = MOM.beta,
        data=data$col_2022_rate)

#Using MLE

llbeta=function(data, par, neg=F){
  alpha=par[1]
  beta=par[2]
  
  loglik=sum(log(dbeta(x=data, alpha, beta)), na.rm=T)
  return(ifelse(neg, -loglik, loglik))
}
par=c(1,1) #initial guess 

optim(par = par,
      fn = llbeta,
      data=data$col_2022_rate,
      neg=T,
      )


alpha=8
beta=950
n=266

momalpha=numeric()
mombeta=numeric()
mlealpha=numeric()
mlebeta=numeric()

for (i in 1:1000){
  set.seed(7272+i)
  beta.sample <- rbeta(n = n,  # sample size
                     shape1 = alpha,   # alpha parameter
                     shape2 = beta)    # beta parameter
  par=c(1,1) #initial guess
  momsol=nleqslv(x=par,
          fn = MOM.beta,
          data=beta.sample)
  momalpha= c(momalpha, momsol$x[1])
  mombeta= c(mombeta, momsol$x[2])
  par=c(1,1) #initial guess 
  mlesol=optim(par = par,
        fn = llbeta,
        data=beta.sample,
        neg=T,
  )
  mlealpha=c(mlealpha, mlesol$par[1])
  mlebeta=c(mlebeta, mlesol$par[2])
}


taskeighttibble= tibble(mlealpha=mlealpha, mlebeta=mlebeta, 
                        momalpha=momalpha, mombeta=mombeta)


alpha_mom_plot <- ggplot(taskeighttibble) + 
  geom_density(aes(x = momalpha), fill = "blue", alpha = 0.5) + 
  labs(title = "Density of Alpha (MOM)", x = "Alpha Estimate", y = "Density") + 
  theme_minimal()

alpha_mle_plot <- ggplot(taskeighttibble) + 
  geom_density(aes(x = mlealpha), fill = "red", alpha = 0.5) + 
  labs(title = "Density of Alpha (MLE)", x = "Alpha Estimate", y = "Density") + 
  theme_minimal()

beta_mom_plot <- ggplot(taskeighttibble) + 
  geom_density(aes(x = mombeta), fill = "blue", alpha = 0.5) + 
  labs(title = "Density of Beta (MOM)", x = "Beta Estimate", y = "Density") + 
  theme_minimal()

beta_mle_plot <- ggplot(taskeighttibble) + 
  geom_density(aes(x = mlebeta), fill = "red", alpha = 0.5) + 
  labs(title = "Density of Beta (MLE)", x = "Beta Estimate", y = "Density") + 
  theme_minimal()

# Combine the plots in a 2x2 grid
alpha_mom_plot + alpha_mle_plot + beta_mom_plot + beta_mle_plot + 
  plot_layout(ncol = 2, nrow = 2)
@

<<echo=FALSE, results='asis', message=FALSE, warning=FALSE>>=
library(tidyverse)
data=read_csv("deathcrudedata.csv")|>
  mutate(col_2022_rate=`2022`/1000)

alpha=8
beta=950
n=266

momalpha=numeric()
mombeta=numeric()
mlealpha=numeric()
mlebeta=numeric()

for (i in 1:1000){
  set.seed(7272+i)
  beta.sample <- rbeta(n = n,  # sample size
                     shape1 = alpha,   # alpha parameter
                     shape2 = beta)    # beta parameter
  par=c(1,1) #initial guess
  momsol=nleqslv(x=par,
          fn = MOM.beta,
          data=beta.sample)
  momalpha= c(momalpha, momsol$x[1])
  mombeta= c(mombeta, momsol$x[2])
  par=c(1,1) #initial guess 
  mlesol=optim(par = par,
        fn = llbeta,
        data=beta.sample,
        neg=T,
  )
  mlealpha=c(mlealpha, mlesol$par[1])
  mlebeta=c(mlebeta, mlesol$par[2])
}

bias_mom_alpha <- mean(momalpha) - alpha
bias_mle_alpha <- mean(mlealpha) - alpha
var_mom_alpha <- var(momalpha)
var_mle_alpha <- var(mlealpha)

precision_mom_alpha <- 1 / var_mom_alpha
precision_mle_alpha <- 1 / var_mle_alpha

mse_mom_alpha <- var_mom_alpha + bias_mom_alpha^2
mse_mle_alpha <- var_mle_alpha + bias_mle_alpha^2

# Calculate Bias, Precision, and MSE for beta
bias_mom_beta <- mean(mombeta) - beta
bias_mle_beta <- mean(mlebeta) - beta
var_mom_beta <- var(mombeta)
var_mle_beta <- var(mlebeta)

precision_mom_beta <- 1 / var_mom_beta
precision_mle_beta <- 1 / var_mle_beta

mse_mom_beta <- var_mom_beta + bias_mom_beta^2
mse_mle_beta <- var_mle_beta + bias_mle_beta^2


dt <- tibble(
  Parameter = c("Alpha", "Beta", "Alpha", "Beta"),
  Method = c("MOM", "MOM", "MLE", "MLE"),
  Bias = c(bias_mom_alpha, bias_mom_beta, bias_mle_alpha, bias_mle_beta),
  Precision = c(precision_mom_alpha, precision_mom_beta, precision_mle_alpha, precision_mle_beta),
  MSE = c(mse_mom_alpha, mse_mom_beta, mse_mle_alpha, mse_mle_beta)
)

# Use the xtable package to create LaTeX table output
library(xtable)
print(xtable(dt, caption = "Bias, Precision, and MSE for Alpha and Beta Estimations"),
      type = "latex", include.rownames = FALSE, comment = FALSE)
@

\end{document}
